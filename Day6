# Task 1

# Rotate Array

class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        if k>len(nums):
            k=k%len(nums)
        nums[:]=nums[-k:]+nums[:-k]
       
 # Task 2
 
 # given an array example ar= { 1,2,3,4,5} of size n and q set of queries and x for each q. Queries can be of two types
 # 1 - left rotate array by x times
 # 2 - right rotate array by x times
 # return the array after perfroming q set of queries
 
 # Sample case 1:
 
 # ar = { 4,7,9,0,4}
 # q=3
 # 1 3
 # 2 8
 # 1 9
 # 2 2
 # 1 2
 # Ans : {4,4,7,9,0}
 
 # Approach 1 - Brute force
 
arr=[int(item) for item in input().split()]
queries= int(input())
for i in range(queries):
    direction,k=map(int,input().split())
    if k>len(arr):
        k=k%len(arr)
    if direction==1:
        arr[:]=arr[k:]+arr[:k]       
    elif direction==2:
        arr[:]=arr[-k:]+arr[:-k]
print(arr)


# Approach 2 - Optimized

# Calculating resulting rotation of all queries, considering left rotations as positive and right rotations as negative

arr=[int(item) for item in input().split()]
queries= int(input())
sum=0
for i in range(queries):
    direction,k=map(int,input().split())
    if direction==1:
        sum+=k
    else:
        sum-=k
if sum>len(arr):
        sum=sum%len(arr)
if sum>0:
    arr[:]=arr[sum:]+arr[:sum]       
elif sum<0:
    arr[:]=arr[-sum:]+arr[:-sum]
print(arr)
